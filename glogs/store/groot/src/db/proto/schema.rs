// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `sdk/schema.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct TypeIdProto {
    // message fields
    pub id: u32,
    pub field_type: TypeIdProto_Type,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TypeIdProto {
    fn default() -> &'a TypeIdProto {
        <TypeIdProto as ::protobuf::Message>::default_instance()
    }
}

impl TypeIdProto {
    pub fn new() -> TypeIdProto {
        ::std::default::Default::default()
    }

    // uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    // .TypeIdProto.Type type = 2;


    pub fn get_field_type(&self) -> TypeIdProto_Type {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = TypeIdProto_Type::VERTEX;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: TypeIdProto_Type) {
        self.field_type = v;
    }
}

impl ::protobuf::Message for TypeIdProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.field_type != TypeIdProto_Type::VERTEX {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if self.field_type != TypeIdProto_Type::VERTEX {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TypeIdProto {
        TypeIdProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id",
                |m: &TypeIdProto| { &m.id },
                |m: &mut TypeIdProto| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TypeIdProto_Type>>(
                "type",
                |m: &TypeIdProto| { &m.field_type },
                |m: &mut TypeIdProto| { &mut m.field_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TypeIdProto>(
                "TypeIdProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TypeIdProto {
        static instance: ::protobuf::rt::LazyV2<TypeIdProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TypeIdProto::new)
    }
}

impl ::protobuf::Clear for TypeIdProto {
    fn clear(&mut self) {
        self.id = 0;
        self.field_type = TypeIdProto_Type::VERTEX;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TypeIdProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TypeIdProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TypeIdProto_Type {
    VERTEX = 0,
    EDGE = 1,
}

impl ::protobuf::ProtobufEnum for TypeIdProto_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TypeIdProto_Type> {
        match value {
            0 => ::std::option::Option::Some(TypeIdProto_Type::VERTEX),
            1 => ::std::option::Option::Some(TypeIdProto_Type::EDGE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TypeIdProto_Type] = &[
            TypeIdProto_Type::VERTEX,
            TypeIdProto_Type::EDGE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TypeIdProto_Type>("TypeIdProto.Type", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TypeIdProto_Type {
}

impl ::std::default::Default for TypeIdProto_Type {
    fn default() -> Self {
        TypeIdProto_Type::VERTEX
    }
}

impl ::protobuf::reflect::ProtobufValue for TypeIdProto_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PropertyDefProto {
    // message fields
    pub id: i32,
    pub name: ::std::string::String,
    pub dataType: i32,
    pub typeExpression: ::std::string::String,
    pub comment: ::std::string::String,
    pub hasDefaultValue: bool,
    pub defaultValue: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PropertyDefProto {
    fn default() -> &'a PropertyDefProto {
        <PropertyDefProto as ::protobuf::Message>::default_instance()
    }
}

impl PropertyDefProto {
    pub fn new() -> PropertyDefProto {
        ::std::default::Default::default()
    }

    // int32 id = 1;


    pub fn get_id(&self) -> i32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i32) {
        self.id = v;
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int32 dataType = 3;


    pub fn get_dataType(&self) -> i32 {
        self.dataType
    }
    pub fn clear_dataType(&mut self) {
        self.dataType = 0;
    }

    // Param is passed by value, moved
    pub fn set_dataType(&mut self, v: i32) {
        self.dataType = v;
    }

    // string typeExpression = 4;


    pub fn get_typeExpression(&self) -> &str {
        &self.typeExpression
    }
    pub fn clear_typeExpression(&mut self) {
        self.typeExpression.clear();
    }

    // Param is passed by value, moved
    pub fn set_typeExpression(&mut self, v: ::std::string::String) {
        self.typeExpression = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_typeExpression(&mut self) -> &mut ::std::string::String {
        &mut self.typeExpression
    }

    // Take field
    pub fn take_typeExpression(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.typeExpression, ::std::string::String::new())
    }

    // string comment = 5;


    pub fn get_comment(&self) -> &str {
        &self.comment
    }
    pub fn clear_comment(&mut self) {
        self.comment.clear();
    }

    // Param is passed by value, moved
    pub fn set_comment(&mut self, v: ::std::string::String) {
        self.comment = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_comment(&mut self) -> &mut ::std::string::String {
        &mut self.comment
    }

    // Take field
    pub fn take_comment(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.comment, ::std::string::String::new())
    }

    // bool hasDefaultValue = 6;


    pub fn get_hasDefaultValue(&self) -> bool {
        self.hasDefaultValue
    }
    pub fn clear_hasDefaultValue(&mut self) {
        self.hasDefaultValue = false;
    }

    // Param is passed by value, moved
    pub fn set_hasDefaultValue(&mut self, v: bool) {
        self.hasDefaultValue = v;
    }

    // bytes defaultValue = 7;


    pub fn get_defaultValue(&self) -> &[u8] {
        &self.defaultValue
    }
    pub fn clear_defaultValue(&mut self) {
        self.defaultValue.clear();
    }

    // Param is passed by value, moved
    pub fn set_defaultValue(&mut self, v: ::std::vec::Vec<u8>) {
        self.defaultValue = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_defaultValue(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.defaultValue
    }

    // Take field
    pub fn take_defaultValue(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.defaultValue, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for PropertyDefProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.dataType = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.typeExpression)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.comment)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.hasDefaultValue = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.defaultValue)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.dataType != 0 {
            my_size += ::protobuf::rt::value_size(3, self.dataType, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.typeExpression.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.typeExpression);
        }
        if !self.comment.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.comment);
        }
        if self.hasDefaultValue != false {
            my_size += 2;
        }
        if !self.defaultValue.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.defaultValue);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int32(1, self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.dataType != 0 {
            os.write_int32(3, self.dataType)?;
        }
        if !self.typeExpression.is_empty() {
            os.write_string(4, &self.typeExpression)?;
        }
        if !self.comment.is_empty() {
            os.write_string(5, &self.comment)?;
        }
        if self.hasDefaultValue != false {
            os.write_bool(6, self.hasDefaultValue)?;
        }
        if !self.defaultValue.is_empty() {
            os.write_bytes(7, &self.defaultValue)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PropertyDefProto {
        PropertyDefProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "id",
                |m: &PropertyDefProto| { &m.id },
                |m: &mut PropertyDefProto| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &PropertyDefProto| { &m.name },
                |m: &mut PropertyDefProto| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "dataType",
                |m: &PropertyDefProto| { &m.dataType },
                |m: &mut PropertyDefProto| { &mut m.dataType },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "typeExpression",
                |m: &PropertyDefProto| { &m.typeExpression },
                |m: &mut PropertyDefProto| { &mut m.typeExpression },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "comment",
                |m: &PropertyDefProto| { &m.comment },
                |m: &mut PropertyDefProto| { &mut m.comment },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "hasDefaultValue",
                |m: &PropertyDefProto| { &m.hasDefaultValue },
                |m: &mut PropertyDefProto| { &mut m.hasDefaultValue },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "defaultValue",
                |m: &PropertyDefProto| { &m.defaultValue },
                |m: &mut PropertyDefProto| { &mut m.defaultValue },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PropertyDefProto>(
                "PropertyDefProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PropertyDefProto {
        static instance: ::protobuf::rt::LazyV2<PropertyDefProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PropertyDefProto::new)
    }
}

impl ::protobuf::Clear for PropertyDefProto {
    fn clear(&mut self) {
        self.id = 0;
        self.name.clear();
        self.dataType = 0;
        self.typeExpression.clear();
        self.comment.clear();
        self.hasDefaultValue = false;
        self.defaultValue.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PropertyDefProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PropertyDefProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TypeDefProto {
    // message fields
    pub id: i32,
    pub label: ::std::string::String,
    pub field_type: TypeIdProto_Type,
    pub isDimensionType: bool,
    pub property: ::protobuf::RepeatedField<PropertyDefProto>,
    pub index: ::protobuf::RepeatedField<IndexDefProto>,
    pub comment: ::std::string::String,
    pub version: i32,
    pub rawRelationShip: ::protobuf::RepeatedField<RelationShipReq>,
    pub relationShip: ::protobuf::RepeatedField<RelationShipProto>,
    pub option: ::protobuf::SingularPtrField<TypeOptionProto>,
    pub gidToPid: ::std::collections::HashMap<i32, i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TypeDefProto {
    fn default() -> &'a TypeDefProto {
        <TypeDefProto as ::protobuf::Message>::default_instance()
    }
}

impl TypeDefProto {
    pub fn new() -> TypeDefProto {
        ::std::default::Default::default()
    }

    // int32 id = 1;


    pub fn get_id(&self) -> i32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i32) {
        self.id = v;
    }

    // string label = 2;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    // .TypeIdProto.Type type = 3;


    pub fn get_field_type(&self) -> TypeIdProto_Type {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = TypeIdProto_Type::VERTEX;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: TypeIdProto_Type) {
        self.field_type = v;
    }

    // bool isDimensionType = 4;


    pub fn get_isDimensionType(&self) -> bool {
        self.isDimensionType
    }
    pub fn clear_isDimensionType(&mut self) {
        self.isDimensionType = false;
    }

    // Param is passed by value, moved
    pub fn set_isDimensionType(&mut self, v: bool) {
        self.isDimensionType = v;
    }

    // repeated .PropertyDefProto property = 5;


    pub fn get_property(&self) -> &[PropertyDefProto] {
        &self.property
    }
    pub fn clear_property(&mut self) {
        self.property.clear();
    }

    // Param is passed by value, moved
    pub fn set_property(&mut self, v: ::protobuf::RepeatedField<PropertyDefProto>) {
        self.property = v;
    }

    // Mutable pointer to the field.
    pub fn mut_property(&mut self) -> &mut ::protobuf::RepeatedField<PropertyDefProto> {
        &mut self.property
    }

    // Take field
    pub fn take_property(&mut self) -> ::protobuf::RepeatedField<PropertyDefProto> {
        ::std::mem::replace(&mut self.property, ::protobuf::RepeatedField::new())
    }

    // repeated .IndexDefProto index = 6;


    pub fn get_index(&self) -> &[IndexDefProto] {
        &self.index
    }
    pub fn clear_index(&mut self) {
        self.index.clear();
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: ::protobuf::RepeatedField<IndexDefProto>) {
        self.index = v;
    }

    // Mutable pointer to the field.
    pub fn mut_index(&mut self) -> &mut ::protobuf::RepeatedField<IndexDefProto> {
        &mut self.index
    }

    // Take field
    pub fn take_index(&mut self) -> ::protobuf::RepeatedField<IndexDefProto> {
        ::std::mem::replace(&mut self.index, ::protobuf::RepeatedField::new())
    }

    // string comment = 7;


    pub fn get_comment(&self) -> &str {
        &self.comment
    }
    pub fn clear_comment(&mut self) {
        self.comment.clear();
    }

    // Param is passed by value, moved
    pub fn set_comment(&mut self, v: ::std::string::String) {
        self.comment = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_comment(&mut self) -> &mut ::std::string::String {
        &mut self.comment
    }

    // Take field
    pub fn take_comment(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.comment, ::std::string::String::new())
    }

    // int32 version = 8;


    pub fn get_version(&self) -> i32 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = v;
    }

    // repeated .RelationShipReq rawRelationShip = 9;


    pub fn get_rawRelationShip(&self) -> &[RelationShipReq] {
        &self.rawRelationShip
    }
    pub fn clear_rawRelationShip(&mut self) {
        self.rawRelationShip.clear();
    }

    // Param is passed by value, moved
    pub fn set_rawRelationShip(&mut self, v: ::protobuf::RepeatedField<RelationShipReq>) {
        self.rawRelationShip = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rawRelationShip(&mut self) -> &mut ::protobuf::RepeatedField<RelationShipReq> {
        &mut self.rawRelationShip
    }

    // Take field
    pub fn take_rawRelationShip(&mut self) -> ::protobuf::RepeatedField<RelationShipReq> {
        ::std::mem::replace(&mut self.rawRelationShip, ::protobuf::RepeatedField::new())
    }

    // repeated .RelationShipProto relationShip = 10;


    pub fn get_relationShip(&self) -> &[RelationShipProto] {
        &self.relationShip
    }
    pub fn clear_relationShip(&mut self) {
        self.relationShip.clear();
    }

    // Param is passed by value, moved
    pub fn set_relationShip(&mut self, v: ::protobuf::RepeatedField<RelationShipProto>) {
        self.relationShip = v;
    }

    // Mutable pointer to the field.
    pub fn mut_relationShip(&mut self) -> &mut ::protobuf::RepeatedField<RelationShipProto> {
        &mut self.relationShip
    }

    // Take field
    pub fn take_relationShip(&mut self) -> ::protobuf::RepeatedField<RelationShipProto> {
        ::std::mem::replace(&mut self.relationShip, ::protobuf::RepeatedField::new())
    }

    // .TypeOptionProto option = 11;


    pub fn get_option(&self) -> &TypeOptionProto {
        self.option.as_ref().unwrap_or_else(|| <TypeOptionProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_option(&mut self) {
        self.option.clear();
    }

    pub fn has_option(&self) -> bool {
        self.option.is_some()
    }

    // Param is passed by value, moved
    pub fn set_option(&mut self, v: TypeOptionProto) {
        self.option = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_option(&mut self) -> &mut TypeOptionProto {
        if self.option.is_none() {
            self.option.set_default();
        }
        self.option.as_mut().unwrap()
    }

    // Take field
    pub fn take_option(&mut self) -> TypeOptionProto {
        self.option.take().unwrap_or_else(|| TypeOptionProto::new())
    }

    // repeated .TypeDefProto.GidToPidEntry gidToPid = 12;


    pub fn get_gidToPid(&self) -> &::std::collections::HashMap<i32, i32> {
        &self.gidToPid
    }
    pub fn clear_gidToPid(&mut self) {
        self.gidToPid.clear();
    }

    // Param is passed by value, moved
    pub fn set_gidToPid(&mut self, v: ::std::collections::HashMap<i32, i32>) {
        self.gidToPid = v;
    }

    // Mutable pointer to the field.
    pub fn mut_gidToPid(&mut self) -> &mut ::std::collections::HashMap<i32, i32> {
        &mut self.gidToPid
    }

    // Take field
    pub fn take_gidToPid(&mut self) -> ::std::collections::HashMap<i32, i32> {
        ::std::mem::replace(&mut self.gidToPid, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for TypeDefProto {
    fn is_initialized(&self) -> bool {
        for v in &self.property {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.index {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.rawRelationShip {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.relationShip {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.option {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 3, &mut self.unknown_fields)?
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isDimensionType = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.property)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.index)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.comment)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.version = tmp;
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rawRelationShip)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.relationShip)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.option)?;
                },
                12 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeInt32>(wire_type, is, &mut self.gidToPid)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.label);
        }
        if self.field_type != TypeIdProto_Type::VERTEX {
            my_size += ::protobuf::rt::enum_size(3, self.field_type);
        }
        if self.isDimensionType != false {
            my_size += 2;
        }
        for value in &self.property {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.index {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.comment.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.comment);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(8, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.rawRelationShip {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.relationShip {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.option.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeInt32>(12, &self.gidToPid);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int32(1, self.id)?;
        }
        if !self.label.is_empty() {
            os.write_string(2, &self.label)?;
        }
        if self.field_type != TypeIdProto_Type::VERTEX {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if self.isDimensionType != false {
            os.write_bool(4, self.isDimensionType)?;
        }
        for v in &self.property {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.index {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.comment.is_empty() {
            os.write_string(7, &self.comment)?;
        }
        if self.version != 0 {
            os.write_int32(8, self.version)?;
        }
        for v in &self.rawRelationShip {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.relationShip {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.option.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeInt32>(12, &self.gidToPid, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TypeDefProto {
        TypeDefProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "id",
                |m: &TypeDefProto| { &m.id },
                |m: &mut TypeDefProto| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "label",
                |m: &TypeDefProto| { &m.label },
                |m: &mut TypeDefProto| { &mut m.label },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TypeIdProto_Type>>(
                "type",
                |m: &TypeDefProto| { &m.field_type },
                |m: &mut TypeDefProto| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "isDimensionType",
                |m: &TypeDefProto| { &m.isDimensionType },
                |m: &mut TypeDefProto| { &mut m.isDimensionType },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PropertyDefProto>>(
                "property",
                |m: &TypeDefProto| { &m.property },
                |m: &mut TypeDefProto| { &mut m.property },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<IndexDefProto>>(
                "index",
                |m: &TypeDefProto| { &m.index },
                |m: &mut TypeDefProto| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "comment",
                |m: &TypeDefProto| { &m.comment },
                |m: &mut TypeDefProto| { &mut m.comment },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "version",
                |m: &TypeDefProto| { &m.version },
                |m: &mut TypeDefProto| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelationShipReq>>(
                "rawRelationShip",
                |m: &TypeDefProto| { &m.rawRelationShip },
                |m: &mut TypeDefProto| { &mut m.rawRelationShip },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelationShipProto>>(
                "relationShip",
                |m: &TypeDefProto| { &m.relationShip },
                |m: &mut TypeDefProto| { &mut m.relationShip },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TypeOptionProto>>(
                "option",
                |m: &TypeDefProto| { &m.option },
                |m: &mut TypeDefProto| { &mut m.option },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeInt32>(
                "gidToPid",
                |m: &TypeDefProto| { &m.gidToPid },
                |m: &mut TypeDefProto| { &mut m.gidToPid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TypeDefProto>(
                "TypeDefProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TypeDefProto {
        static instance: ::protobuf::rt::LazyV2<TypeDefProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TypeDefProto::new)
    }
}

impl ::protobuf::Clear for TypeDefProto {
    fn clear(&mut self) {
        self.id = 0;
        self.label.clear();
        self.field_type = TypeIdProto_Type::VERTEX;
        self.isDimensionType = false;
        self.property.clear();
        self.index.clear();
        self.comment.clear();
        self.version = 0;
        self.rawRelationShip.clear();
        self.relationShip.clear();
        self.option.clear();
        self.gidToPid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TypeDefProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TypeDefProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TypeOptionProto {
    // message fields
    pub storageEngine: StorageEngine,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TypeOptionProto {
    fn default() -> &'a TypeOptionProto {
        <TypeOptionProto as ::protobuf::Message>::default_instance()
    }
}

impl TypeOptionProto {
    pub fn new() -> TypeOptionProto {
        ::std::default::Default::default()
    }

    // .StorageEngine storageEngine = 1;


    pub fn get_storageEngine(&self) -> StorageEngine {
        self.storageEngine
    }
    pub fn clear_storageEngine(&mut self) {
        self.storageEngine = StorageEngine::MEMORY;
    }

    // Param is passed by value, moved
    pub fn set_storageEngine(&mut self, v: StorageEngine) {
        self.storageEngine = v;
    }
}

impl ::protobuf::Message for TypeOptionProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.storageEngine, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.storageEngine != StorageEngine::MEMORY {
            my_size += ::protobuf::rt::enum_size(1, self.storageEngine);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.storageEngine != StorageEngine::MEMORY {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.storageEngine))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TypeOptionProto {
        TypeOptionProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<StorageEngine>>(
                "storageEngine",
                |m: &TypeOptionProto| { &m.storageEngine },
                |m: &mut TypeOptionProto| { &mut m.storageEngine },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TypeOptionProto>(
                "TypeOptionProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TypeOptionProto {
        static instance: ::protobuf::rt::LazyV2<TypeOptionProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TypeOptionProto::new)
    }
}

impl ::protobuf::Clear for TypeOptionProto {
    fn clear(&mut self) {
        self.storageEngine = StorageEngine::MEMORY;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TypeOptionProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TypeOptionProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RelationShipProto {
    // message fields
    pub srcId: ::protobuf::SingularPtrField<TypeIdProto>,
    pub dstId: ::protobuf::SingularPtrField<TypeIdProto>,
    pub edgeId: ::protobuf::SingularPtrField<TypeIdProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RelationShipProto {
    fn default() -> &'a RelationShipProto {
        <RelationShipProto as ::protobuf::Message>::default_instance()
    }
}

impl RelationShipProto {
    pub fn new() -> RelationShipProto {
        ::std::default::Default::default()
    }

    // .TypeIdProto srcId = 1;


    pub fn get_srcId(&self) -> &TypeIdProto {
        self.srcId.as_ref().unwrap_or_else(|| <TypeIdProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_srcId(&mut self) {
        self.srcId.clear();
    }

    pub fn has_srcId(&self) -> bool {
        self.srcId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_srcId(&mut self, v: TypeIdProto) {
        self.srcId = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_srcId(&mut self) -> &mut TypeIdProto {
        if self.srcId.is_none() {
            self.srcId.set_default();
        }
        self.srcId.as_mut().unwrap()
    }

    // Take field
    pub fn take_srcId(&mut self) -> TypeIdProto {
        self.srcId.take().unwrap_or_else(|| TypeIdProto::new())
    }

    // .TypeIdProto dstId = 2;


    pub fn get_dstId(&self) -> &TypeIdProto {
        self.dstId.as_ref().unwrap_or_else(|| <TypeIdProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_dstId(&mut self) {
        self.dstId.clear();
    }

    pub fn has_dstId(&self) -> bool {
        self.dstId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dstId(&mut self, v: TypeIdProto) {
        self.dstId = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dstId(&mut self) -> &mut TypeIdProto {
        if self.dstId.is_none() {
            self.dstId.set_default();
        }
        self.dstId.as_mut().unwrap()
    }

    // Take field
    pub fn take_dstId(&mut self) -> TypeIdProto {
        self.dstId.take().unwrap_or_else(|| TypeIdProto::new())
    }

    // .TypeIdProto edgeId = 3;


    pub fn get_edgeId(&self) -> &TypeIdProto {
        self.edgeId.as_ref().unwrap_or_else(|| <TypeIdProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_edgeId(&mut self) {
        self.edgeId.clear();
    }

    pub fn has_edgeId(&self) -> bool {
        self.edgeId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_edgeId(&mut self, v: TypeIdProto) {
        self.edgeId = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_edgeId(&mut self) -> &mut TypeIdProto {
        if self.edgeId.is_none() {
            self.edgeId.set_default();
        }
        self.edgeId.as_mut().unwrap()
    }

    // Take field
    pub fn take_edgeId(&mut self) -> TypeIdProto {
        self.edgeId.take().unwrap_or_else(|| TypeIdProto::new())
    }
}

impl ::protobuf::Message for RelationShipProto {
    fn is_initialized(&self) -> bool {
        for v in &self.srcId {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.dstId {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.edgeId {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.srcId)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.dstId)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.edgeId)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.srcId.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.dstId.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.edgeId.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.srcId.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.dstId.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.edgeId.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RelationShipProto {
        RelationShipProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TypeIdProto>>(
                "srcId",
                |m: &RelationShipProto| { &m.srcId },
                |m: &mut RelationShipProto| { &mut m.srcId },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TypeIdProto>>(
                "dstId",
                |m: &RelationShipProto| { &m.dstId },
                |m: &mut RelationShipProto| { &mut m.dstId },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TypeIdProto>>(
                "edgeId",
                |m: &RelationShipProto| { &m.edgeId },
                |m: &mut RelationShipProto| { &mut m.edgeId },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RelationShipProto>(
                "RelationShipProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RelationShipProto {
        static instance: ::protobuf::rt::LazyV2<RelationShipProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RelationShipProto::new)
    }
}

impl ::protobuf::Clear for RelationShipProto {
    fn clear(&mut self) {
        self.srcId.clear();
        self.dstId.clear();
        self.edgeId.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RelationShipProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RelationShipProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RelationShipWithTypeProto {
    // message fields
    pub srcVertex: ::protobuf::SingularPtrField<TypeDefProto>,
    pub edgeType: ::protobuf::SingularPtrField<TypeDefProto>,
    pub dstVertex: ::protobuf::SingularPtrField<TypeDefProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RelationShipWithTypeProto {
    fn default() -> &'a RelationShipWithTypeProto {
        <RelationShipWithTypeProto as ::protobuf::Message>::default_instance()
    }
}

impl RelationShipWithTypeProto {
    pub fn new() -> RelationShipWithTypeProto {
        ::std::default::Default::default()
    }

    // .TypeDefProto srcVertex = 1;


    pub fn get_srcVertex(&self) -> &TypeDefProto {
        self.srcVertex.as_ref().unwrap_or_else(|| <TypeDefProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_srcVertex(&mut self) {
        self.srcVertex.clear();
    }

    pub fn has_srcVertex(&self) -> bool {
        self.srcVertex.is_some()
    }

    // Param is passed by value, moved
    pub fn set_srcVertex(&mut self, v: TypeDefProto) {
        self.srcVertex = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_srcVertex(&mut self) -> &mut TypeDefProto {
        if self.srcVertex.is_none() {
            self.srcVertex.set_default();
        }
        self.srcVertex.as_mut().unwrap()
    }

    // Take field
    pub fn take_srcVertex(&mut self) -> TypeDefProto {
        self.srcVertex.take().unwrap_or_else(|| TypeDefProto::new())
    }

    // .TypeDefProto edgeType = 2;


    pub fn get_edgeType(&self) -> &TypeDefProto {
        self.edgeType.as_ref().unwrap_or_else(|| <TypeDefProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_edgeType(&mut self) {
        self.edgeType.clear();
    }

    pub fn has_edgeType(&self) -> bool {
        self.edgeType.is_some()
    }

    // Param is passed by value, moved
    pub fn set_edgeType(&mut self, v: TypeDefProto) {
        self.edgeType = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_edgeType(&mut self) -> &mut TypeDefProto {
        if self.edgeType.is_none() {
            self.edgeType.set_default();
        }
        self.edgeType.as_mut().unwrap()
    }

    // Take field
    pub fn take_edgeType(&mut self) -> TypeDefProto {
        self.edgeType.take().unwrap_or_else(|| TypeDefProto::new())
    }

    // .TypeDefProto dstVertex = 3;


    pub fn get_dstVertex(&self) -> &TypeDefProto {
        self.dstVertex.as_ref().unwrap_or_else(|| <TypeDefProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_dstVertex(&mut self) {
        self.dstVertex.clear();
    }

    pub fn has_dstVertex(&self) -> bool {
        self.dstVertex.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dstVertex(&mut self, v: TypeDefProto) {
        self.dstVertex = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dstVertex(&mut self) -> &mut TypeDefProto {
        if self.dstVertex.is_none() {
            self.dstVertex.set_default();
        }
        self.dstVertex.as_mut().unwrap()
    }

    // Take field
    pub fn take_dstVertex(&mut self) -> TypeDefProto {
        self.dstVertex.take().unwrap_or_else(|| TypeDefProto::new())
    }
}

impl ::protobuf::Message for RelationShipWithTypeProto {
    fn is_initialized(&self) -> bool {
        for v in &self.srcVertex {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.edgeType {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.dstVertex {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.srcVertex)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.edgeType)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.dstVertex)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.srcVertex.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.edgeType.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.dstVertex.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.srcVertex.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.edgeType.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.dstVertex.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RelationShipWithTypeProto {
        RelationShipWithTypeProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TypeDefProto>>(
                "srcVertex",
                |m: &RelationShipWithTypeProto| { &m.srcVertex },
                |m: &mut RelationShipWithTypeProto| { &mut m.srcVertex },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TypeDefProto>>(
                "edgeType",
                |m: &RelationShipWithTypeProto| { &m.edgeType },
                |m: &mut RelationShipWithTypeProto| { &mut m.edgeType },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TypeDefProto>>(
                "dstVertex",
                |m: &RelationShipWithTypeProto| { &m.dstVertex },
                |m: &mut RelationShipWithTypeProto| { &mut m.dstVertex },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RelationShipWithTypeProto>(
                "RelationShipWithTypeProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RelationShipWithTypeProto {
        static instance: ::protobuf::rt::LazyV2<RelationShipWithTypeProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RelationShipWithTypeProto::new)
    }
}

impl ::protobuf::Clear for RelationShipWithTypeProto {
    fn clear(&mut self) {
        self.srcVertex.clear();
        self.edgeType.clear();
        self.dstVertex.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RelationShipWithTypeProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RelationShipWithTypeProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IndexDefProto {
    // message fields
    pub name: ::std::string::String,
    pub propertyId: ::std::vec::Vec<i32>,
    pub indexType: IndexDefProto_Type,
    pub property: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IndexDefProto {
    fn default() -> &'a IndexDefProto {
        <IndexDefProto as ::protobuf::Message>::default_instance()
    }
}

impl IndexDefProto {
    pub fn new() -> IndexDefProto {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated int32 propertyId = 2;


    pub fn get_propertyId(&self) -> &[i32] {
        &self.propertyId
    }
    pub fn clear_propertyId(&mut self) {
        self.propertyId.clear();
    }

    // Param is passed by value, moved
    pub fn set_propertyId(&mut self, v: ::std::vec::Vec<i32>) {
        self.propertyId = v;
    }

    // Mutable pointer to the field.
    pub fn mut_propertyId(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.propertyId
    }

    // Take field
    pub fn take_propertyId(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.propertyId, ::std::vec::Vec::new())
    }

    // .IndexDefProto.Type indexType = 3;


    pub fn get_indexType(&self) -> IndexDefProto_Type {
        self.indexType
    }
    pub fn clear_indexType(&mut self) {
        self.indexType = IndexDefProto_Type::PRIMARY_KEY;
    }

    // Param is passed by value, moved
    pub fn set_indexType(&mut self, v: IndexDefProto_Type) {
        self.indexType = v;
    }

    // repeated string property = 4;


    pub fn get_property(&self) -> &[::std::string::String] {
        &self.property
    }
    pub fn clear_property(&mut self) {
        self.property.clear();
    }

    // Param is passed by value, moved
    pub fn set_property(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.property = v;
    }

    // Mutable pointer to the field.
    pub fn mut_property(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.property
    }

    // Take field
    pub fn take_property(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.property, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for IndexDefProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.propertyId)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.indexType, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.property)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        for value in &self.propertyId {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.indexType != IndexDefProto_Type::PRIMARY_KEY {
            my_size += ::protobuf::rt::enum_size(3, self.indexType);
        }
        for value in &self.property {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for v in &self.propertyId {
            os.write_int32(2, *v)?;
        };
        if self.indexType != IndexDefProto_Type::PRIMARY_KEY {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.indexType))?;
        }
        for v in &self.property {
            os.write_string(4, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IndexDefProto {
        IndexDefProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &IndexDefProto| { &m.name },
                |m: &mut IndexDefProto| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "propertyId",
                |m: &IndexDefProto| { &m.propertyId },
                |m: &mut IndexDefProto| { &mut m.propertyId },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<IndexDefProto_Type>>(
                "indexType",
                |m: &IndexDefProto| { &m.indexType },
                |m: &mut IndexDefProto| { &mut m.indexType },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "property",
                |m: &IndexDefProto| { &m.property },
                |m: &mut IndexDefProto| { &mut m.property },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IndexDefProto>(
                "IndexDefProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IndexDefProto {
        static instance: ::protobuf::rt::LazyV2<IndexDefProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IndexDefProto::new)
    }
}

impl ::protobuf::Clear for IndexDefProto {
    fn clear(&mut self) {
        self.name.clear();
        self.propertyId.clear();
        self.indexType = IndexDefProto_Type::PRIMARY_KEY;
        self.property.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IndexDefProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IndexDefProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum IndexDefProto_Type {
    PRIMARY_KEY = 0,
    UNIQUE = 1,
    UNIQUE_WITH_EDGE = 2,
}

impl ::protobuf::ProtobufEnum for IndexDefProto_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<IndexDefProto_Type> {
        match value {
            0 => ::std::option::Option::Some(IndexDefProto_Type::PRIMARY_KEY),
            1 => ::std::option::Option::Some(IndexDefProto_Type::UNIQUE),
            2 => ::std::option::Option::Some(IndexDefProto_Type::UNIQUE_WITH_EDGE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [IndexDefProto_Type] = &[
            IndexDefProto_Type::PRIMARY_KEY,
            IndexDefProto_Type::UNIQUE,
            IndexDefProto_Type::UNIQUE_WITH_EDGE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<IndexDefProto_Type>("IndexDefProto.Type", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for IndexDefProto_Type {
}

impl ::std::default::Default for IndexDefProto_Type {
    fn default() -> Self {
        IndexDefProto_Type::PRIMARY_KEY
    }
}

impl ::protobuf::reflect::ProtobufValue for IndexDefProto_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SchemaProto {
    // message fields
    pub field_type: ::protobuf::RepeatedField<TypeDefProto>,
    pub partitionNum: i32,
    pub version: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SchemaProto {
    fn default() -> &'a SchemaProto {
        <SchemaProto as ::protobuf::Message>::default_instance()
    }
}

impl SchemaProto {
    pub fn new() -> SchemaProto {
        ::std::default::Default::default()
    }

    // repeated .TypeDefProto type = 1;


    pub fn get_field_type(&self) -> &[TypeDefProto] {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::protobuf::RepeatedField<TypeDefProto>) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_type(&mut self) -> &mut ::protobuf::RepeatedField<TypeDefProto> {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::protobuf::RepeatedField<TypeDefProto> {
        ::std::mem::replace(&mut self.field_type, ::protobuf::RepeatedField::new())
    }

    // int32 partitionNum = 2;


    pub fn get_partitionNum(&self) -> i32 {
        self.partitionNum
    }
    pub fn clear_partitionNum(&mut self) {
        self.partitionNum = 0;
    }

    // Param is passed by value, moved
    pub fn set_partitionNum(&mut self, v: i32) {
        self.partitionNum = v;
    }

    // int32 version = 3;


    pub fn get_version(&self) -> i32 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = v;
    }
}

impl ::protobuf::Message for SchemaProto {
    fn is_initialized(&self) -> bool {
        for v in &self.field_type {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.partitionNum = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.version = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.field_type {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.partitionNum != 0 {
            my_size += ::protobuf::rt::value_size(2, self.partitionNum, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(3, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.field_type {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.partitionNum != 0 {
            os.write_int32(2, self.partitionNum)?;
        }
        if self.version != 0 {
            os.write_int32(3, self.version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SchemaProto {
        SchemaProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TypeDefProto>>(
                "type",
                |m: &SchemaProto| { &m.field_type },
                |m: &mut SchemaProto| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "partitionNum",
                |m: &SchemaProto| { &m.partitionNum },
                |m: &mut SchemaProto| { &mut m.partitionNum },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "version",
                |m: &SchemaProto| { &m.version },
                |m: &mut SchemaProto| { &mut m.version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SchemaProto>(
                "SchemaProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SchemaProto {
        static instance: ::protobuf::rt::LazyV2<SchemaProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SchemaProto::new)
    }
}

impl ::protobuf::Clear for SchemaProto {
    fn clear(&mut self) {
        self.field_type.clear();
        self.partitionNum = 0;
        self.version = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SchemaProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SchemaProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateVertexTypeReq {
    // message fields
    pub label: ::std::string::String,
    pub property: ::protobuf::RepeatedField<PropertyDefProto>,
    pub pks: ::protobuf::RepeatedField<::std::string::String>,
    pub comment: ::std::string::String,
    pub isDimensionType: bool,
    pub option: ::protobuf::SingularPtrField<TypeOptionProto>,
    pub index: ::protobuf::RepeatedField<IndexDefProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateVertexTypeReq {
    fn default() -> &'a CreateVertexTypeReq {
        <CreateVertexTypeReq as ::protobuf::Message>::default_instance()
    }
}

impl CreateVertexTypeReq {
    pub fn new() -> CreateVertexTypeReq {
        ::std::default::Default::default()
    }

    // string label = 1;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    // repeated .PropertyDefProto property = 2;


    pub fn get_property(&self) -> &[PropertyDefProto] {
        &self.property
    }
    pub fn clear_property(&mut self) {
        self.property.clear();
    }

    // Param is passed by value, moved
    pub fn set_property(&mut self, v: ::protobuf::RepeatedField<PropertyDefProto>) {
        self.property = v;
    }

    // Mutable pointer to the field.
    pub fn mut_property(&mut self) -> &mut ::protobuf::RepeatedField<PropertyDefProto> {
        &mut self.property
    }

    // Take field
    pub fn take_property(&mut self) -> ::protobuf::RepeatedField<PropertyDefProto> {
        ::std::mem::replace(&mut self.property, ::protobuf::RepeatedField::new())
    }

    // repeated string pks = 3;


    pub fn get_pks(&self) -> &[::std::string::String] {
        &self.pks
    }
    pub fn clear_pks(&mut self) {
        self.pks.clear();
    }

    // Param is passed by value, moved
    pub fn set_pks(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.pks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_pks(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.pks
    }

    // Take field
    pub fn take_pks(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.pks, ::protobuf::RepeatedField::new())
    }

    // string comment = 4;


    pub fn get_comment(&self) -> &str {
        &self.comment
    }
    pub fn clear_comment(&mut self) {
        self.comment.clear();
    }

    // Param is passed by value, moved
    pub fn set_comment(&mut self, v: ::std::string::String) {
        self.comment = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_comment(&mut self) -> &mut ::std::string::String {
        &mut self.comment
    }

    // Take field
    pub fn take_comment(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.comment, ::std::string::String::new())
    }

    // bool isDimensionType = 5;


    pub fn get_isDimensionType(&self) -> bool {
        self.isDimensionType
    }
    pub fn clear_isDimensionType(&mut self) {
        self.isDimensionType = false;
    }

    // Param is passed by value, moved
    pub fn set_isDimensionType(&mut self, v: bool) {
        self.isDimensionType = v;
    }

    // .TypeOptionProto option = 6;


    pub fn get_option(&self) -> &TypeOptionProto {
        self.option.as_ref().unwrap_or_else(|| <TypeOptionProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_option(&mut self) {
        self.option.clear();
    }

    pub fn has_option(&self) -> bool {
        self.option.is_some()
    }

    // Param is passed by value, moved
    pub fn set_option(&mut self, v: TypeOptionProto) {
        self.option = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_option(&mut self) -> &mut TypeOptionProto {
        if self.option.is_none() {
            self.option.set_default();
        }
        self.option.as_mut().unwrap()
    }

    // Take field
    pub fn take_option(&mut self) -> TypeOptionProto {
        self.option.take().unwrap_or_else(|| TypeOptionProto::new())
    }

    // repeated .IndexDefProto index = 7;


    pub fn get_index(&self) -> &[IndexDefProto] {
        &self.index
    }
    pub fn clear_index(&mut self) {
        self.index.clear();
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: ::protobuf::RepeatedField<IndexDefProto>) {
        self.index = v;
    }

    // Mutable pointer to the field.
    pub fn mut_index(&mut self) -> &mut ::protobuf::RepeatedField<IndexDefProto> {
        &mut self.index
    }

    // Take field
    pub fn take_index(&mut self) -> ::protobuf::RepeatedField<IndexDefProto> {
        ::std::mem::replace(&mut self.index, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CreateVertexTypeReq {
    fn is_initialized(&self) -> bool {
        for v in &self.property {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.option {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.index {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.property)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.pks)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.comment)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isDimensionType = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.option)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.index)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.label);
        }
        for value in &self.property {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.pks {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if !self.comment.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.comment);
        }
        if self.isDimensionType != false {
            my_size += 2;
        }
        if let Some(ref v) = self.option.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.index {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.label.is_empty() {
            os.write_string(1, &self.label)?;
        }
        for v in &self.property {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.pks {
            os.write_string(3, &v)?;
        };
        if !self.comment.is_empty() {
            os.write_string(4, &self.comment)?;
        }
        if self.isDimensionType != false {
            os.write_bool(5, self.isDimensionType)?;
        }
        if let Some(ref v) = self.option.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.index {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateVertexTypeReq {
        CreateVertexTypeReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "label",
                |m: &CreateVertexTypeReq| { &m.label },
                |m: &mut CreateVertexTypeReq| { &mut m.label },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PropertyDefProto>>(
                "property",
                |m: &CreateVertexTypeReq| { &m.property },
                |m: &mut CreateVertexTypeReq| { &mut m.property },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pks",
                |m: &CreateVertexTypeReq| { &m.pks },
                |m: &mut CreateVertexTypeReq| { &mut m.pks },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "comment",
                |m: &CreateVertexTypeReq| { &m.comment },
                |m: &mut CreateVertexTypeReq| { &mut m.comment },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "isDimensionType",
                |m: &CreateVertexTypeReq| { &m.isDimensionType },
                |m: &mut CreateVertexTypeReq| { &mut m.isDimensionType },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TypeOptionProto>>(
                "option",
                |m: &CreateVertexTypeReq| { &m.option },
                |m: &mut CreateVertexTypeReq| { &mut m.option },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<IndexDefProto>>(
                "index",
                |m: &CreateVertexTypeReq| { &m.index },
                |m: &mut CreateVertexTypeReq| { &mut m.index },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateVertexTypeReq>(
                "CreateVertexTypeReq",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateVertexTypeReq {
        static instance: ::protobuf::rt::LazyV2<CreateVertexTypeReq> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateVertexTypeReq::new)
    }
}

impl ::protobuf::Clear for CreateVertexTypeReq {
    fn clear(&mut self) {
        self.label.clear();
        self.property.clear();
        self.pks.clear();
        self.comment.clear();
        self.isDimensionType = false;
        self.option.clear();
        self.index.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateVertexTypeReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateVertexTypeReq {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateEdgeTypeReq {
    // message fields
    pub label: ::std::string::String,
    pub property: ::protobuf::RepeatedField<PropertyDefProto>,
    pub comment: ::std::string::String,
    pub relationShip: ::protobuf::RepeatedField<RelationShipReq>,
    pub isDimensionType: bool,
    pub option: ::protobuf::SingularPtrField<TypeOptionProto>,
    pub index: ::protobuf::RepeatedField<IndexDefProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateEdgeTypeReq {
    fn default() -> &'a CreateEdgeTypeReq {
        <CreateEdgeTypeReq as ::protobuf::Message>::default_instance()
    }
}

impl CreateEdgeTypeReq {
    pub fn new() -> CreateEdgeTypeReq {
        ::std::default::Default::default()
    }

    // string label = 1;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    // repeated .PropertyDefProto property = 2;


    pub fn get_property(&self) -> &[PropertyDefProto] {
        &self.property
    }
    pub fn clear_property(&mut self) {
        self.property.clear();
    }

    // Param is passed by value, moved
    pub fn set_property(&mut self, v: ::protobuf::RepeatedField<PropertyDefProto>) {
        self.property = v;
    }

    // Mutable pointer to the field.
    pub fn mut_property(&mut self) -> &mut ::protobuf::RepeatedField<PropertyDefProto> {
        &mut self.property
    }

    // Take field
    pub fn take_property(&mut self) -> ::protobuf::RepeatedField<PropertyDefProto> {
        ::std::mem::replace(&mut self.property, ::protobuf::RepeatedField::new())
    }

    // string comment = 3;


    pub fn get_comment(&self) -> &str {
        &self.comment
    }
    pub fn clear_comment(&mut self) {
        self.comment.clear();
    }

    // Param is passed by value, moved
    pub fn set_comment(&mut self, v: ::std::string::String) {
        self.comment = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_comment(&mut self) -> &mut ::std::string::String {
        &mut self.comment
    }

    // Take field
    pub fn take_comment(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.comment, ::std::string::String::new())
    }

    // repeated .RelationShipReq relationShip = 4;


    pub fn get_relationShip(&self) -> &[RelationShipReq] {
        &self.relationShip
    }
    pub fn clear_relationShip(&mut self) {
        self.relationShip.clear();
    }

    // Param is passed by value, moved
    pub fn set_relationShip(&mut self, v: ::protobuf::RepeatedField<RelationShipReq>) {
        self.relationShip = v;
    }

    // Mutable pointer to the field.
    pub fn mut_relationShip(&mut self) -> &mut ::protobuf::RepeatedField<RelationShipReq> {
        &mut self.relationShip
    }

    // Take field
    pub fn take_relationShip(&mut self) -> ::protobuf::RepeatedField<RelationShipReq> {
        ::std::mem::replace(&mut self.relationShip, ::protobuf::RepeatedField::new())
    }

    // bool isDimensionType = 5;


    pub fn get_isDimensionType(&self) -> bool {
        self.isDimensionType
    }
    pub fn clear_isDimensionType(&mut self) {
        self.isDimensionType = false;
    }

    // Param is passed by value, moved
    pub fn set_isDimensionType(&mut self, v: bool) {
        self.isDimensionType = v;
    }

    // .TypeOptionProto option = 6;


    pub fn get_option(&self) -> &TypeOptionProto {
        self.option.as_ref().unwrap_or_else(|| <TypeOptionProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_option(&mut self) {
        self.option.clear();
    }

    pub fn has_option(&self) -> bool {
        self.option.is_some()
    }

    // Param is passed by value, moved
    pub fn set_option(&mut self, v: TypeOptionProto) {
        self.option = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_option(&mut self) -> &mut TypeOptionProto {
        if self.option.is_none() {
            self.option.set_default();
        }
        self.option.as_mut().unwrap()
    }

    // Take field
    pub fn take_option(&mut self) -> TypeOptionProto {
        self.option.take().unwrap_or_else(|| TypeOptionProto::new())
    }

    // repeated .IndexDefProto index = 7;


    pub fn get_index(&self) -> &[IndexDefProto] {
        &self.index
    }
    pub fn clear_index(&mut self) {
        self.index.clear();
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: ::protobuf::RepeatedField<IndexDefProto>) {
        self.index = v;
    }

    // Mutable pointer to the field.
    pub fn mut_index(&mut self) -> &mut ::protobuf::RepeatedField<IndexDefProto> {
        &mut self.index
    }

    // Take field
    pub fn take_index(&mut self) -> ::protobuf::RepeatedField<IndexDefProto> {
        ::std::mem::replace(&mut self.index, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CreateEdgeTypeReq {
    fn is_initialized(&self) -> bool {
        for v in &self.property {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.relationShip {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.option {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.index {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.property)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.comment)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.relationShip)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isDimensionType = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.option)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.index)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.label);
        }
        for value in &self.property {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.comment.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.comment);
        }
        for value in &self.relationShip {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.isDimensionType != false {
            my_size += 2;
        }
        if let Some(ref v) = self.option.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.index {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.label.is_empty() {
            os.write_string(1, &self.label)?;
        }
        for v in &self.property {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.comment.is_empty() {
            os.write_string(3, &self.comment)?;
        }
        for v in &self.relationShip {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.isDimensionType != false {
            os.write_bool(5, self.isDimensionType)?;
        }
        if let Some(ref v) = self.option.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.index {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateEdgeTypeReq {
        CreateEdgeTypeReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "label",
                |m: &CreateEdgeTypeReq| { &m.label },
                |m: &mut CreateEdgeTypeReq| { &mut m.label },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PropertyDefProto>>(
                "property",
                |m: &CreateEdgeTypeReq| { &m.property },
                |m: &mut CreateEdgeTypeReq| { &mut m.property },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "comment",
                |m: &CreateEdgeTypeReq| { &m.comment },
                |m: &mut CreateEdgeTypeReq| { &mut m.comment },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelationShipReq>>(
                "relationShip",
                |m: &CreateEdgeTypeReq| { &m.relationShip },
                |m: &mut CreateEdgeTypeReq| { &mut m.relationShip },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "isDimensionType",
                |m: &CreateEdgeTypeReq| { &m.isDimensionType },
                |m: &mut CreateEdgeTypeReq| { &mut m.isDimensionType },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TypeOptionProto>>(
                "option",
                |m: &CreateEdgeTypeReq| { &m.option },
                |m: &mut CreateEdgeTypeReq| { &mut m.option },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<IndexDefProto>>(
                "index",
                |m: &CreateEdgeTypeReq| { &m.index },
                |m: &mut CreateEdgeTypeReq| { &mut m.index },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateEdgeTypeReq>(
                "CreateEdgeTypeReq",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateEdgeTypeReq {
        static instance: ::protobuf::rt::LazyV2<CreateEdgeTypeReq> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateEdgeTypeReq::new)
    }
}

impl ::protobuf::Clear for CreateEdgeTypeReq {
    fn clear(&mut self) {
        self.label.clear();
        self.property.clear();
        self.comment.clear();
        self.relationShip.clear();
        self.isDimensionType = false;
        self.option.clear();
        self.index.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateEdgeTypeReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateEdgeTypeReq {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TypeReq {
    // message fields
    pub schemaVersion: i32,
    pub typeVersion: i32,
    pub label: ::std::string::String,
    pub typeId: ::protobuf::SingularPtrField<TypeIdProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TypeReq {
    fn default() -> &'a TypeReq {
        <TypeReq as ::protobuf::Message>::default_instance()
    }
}

impl TypeReq {
    pub fn new() -> TypeReq {
        ::std::default::Default::default()
    }

    // int32 schemaVersion = 1;


    pub fn get_schemaVersion(&self) -> i32 {
        self.schemaVersion
    }
    pub fn clear_schemaVersion(&mut self) {
        self.schemaVersion = 0;
    }

    // Param is passed by value, moved
    pub fn set_schemaVersion(&mut self, v: i32) {
        self.schemaVersion = v;
    }

    // int32 typeVersion = 2;


    pub fn get_typeVersion(&self) -> i32 {
        self.typeVersion
    }
    pub fn clear_typeVersion(&mut self) {
        self.typeVersion = 0;
    }

    // Param is passed by value, moved
    pub fn set_typeVersion(&mut self, v: i32) {
        self.typeVersion = v;
    }

    // string label = 3;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    // .TypeIdProto typeId = 4;


    pub fn get_typeId(&self) -> &TypeIdProto {
        self.typeId.as_ref().unwrap_or_else(|| <TypeIdProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_typeId(&mut self) {
        self.typeId.clear();
    }

    pub fn has_typeId(&self) -> bool {
        self.typeId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_typeId(&mut self, v: TypeIdProto) {
        self.typeId = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_typeId(&mut self) -> &mut TypeIdProto {
        if self.typeId.is_none() {
            self.typeId.set_default();
        }
        self.typeId.as_mut().unwrap()
    }

    // Take field
    pub fn take_typeId(&mut self) -> TypeIdProto {
        self.typeId.take().unwrap_or_else(|| TypeIdProto::new())
    }
}

impl ::protobuf::Message for TypeReq {
    fn is_initialized(&self) -> bool {
        for v in &self.typeId {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.schemaVersion = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.typeVersion = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.typeId)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.schemaVersion != 0 {
            my_size += ::protobuf::rt::value_size(1, self.schemaVersion, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.typeVersion != 0 {
            my_size += ::protobuf::rt::value_size(2, self.typeVersion, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.label);
        }
        if let Some(ref v) = self.typeId.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.schemaVersion != 0 {
            os.write_int32(1, self.schemaVersion)?;
        }
        if self.typeVersion != 0 {
            os.write_int32(2, self.typeVersion)?;
        }
        if !self.label.is_empty() {
            os.write_string(3, &self.label)?;
        }
        if let Some(ref v) = self.typeId.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TypeReq {
        TypeReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "schemaVersion",
                |m: &TypeReq| { &m.schemaVersion },
                |m: &mut TypeReq| { &mut m.schemaVersion },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "typeVersion",
                |m: &TypeReq| { &m.typeVersion },
                |m: &mut TypeReq| { &mut m.typeVersion },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "label",
                |m: &TypeReq| { &m.label },
                |m: &mut TypeReq| { &mut m.label },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TypeIdProto>>(
                "typeId",
                |m: &TypeReq| { &m.typeId },
                |m: &mut TypeReq| { &mut m.typeId },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TypeReq>(
                "TypeReq",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TypeReq {
        static instance: ::protobuf::rt::LazyV2<TypeReq> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TypeReq::new)
    }
}

impl ::protobuf::Clear for TypeReq {
    fn clear(&mut self) {
        self.schemaVersion = 0;
        self.typeVersion = 0;
        self.label.clear();
        self.typeId.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TypeReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TypeReq {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddTypePropertyReq {
    // message fields
    pub label: ::std::string::String,
    pub property: ::protobuf::RepeatedField<PropertyDefProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddTypePropertyReq {
    fn default() -> &'a AddTypePropertyReq {
        <AddTypePropertyReq as ::protobuf::Message>::default_instance()
    }
}

impl AddTypePropertyReq {
    pub fn new() -> AddTypePropertyReq {
        ::std::default::Default::default()
    }

    // string label = 1;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    // repeated .PropertyDefProto property = 2;


    pub fn get_property(&self) -> &[PropertyDefProto] {
        &self.property
    }
    pub fn clear_property(&mut self) {
        self.property.clear();
    }

    // Param is passed by value, moved
    pub fn set_property(&mut self, v: ::protobuf::RepeatedField<PropertyDefProto>) {
        self.property = v;
    }

    // Mutable pointer to the field.
    pub fn mut_property(&mut self) -> &mut ::protobuf::RepeatedField<PropertyDefProto> {
        &mut self.property
    }

    // Take field
    pub fn take_property(&mut self) -> ::protobuf::RepeatedField<PropertyDefProto> {
        ::std::mem::replace(&mut self.property, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AddTypePropertyReq {
    fn is_initialized(&self) -> bool {
        for v in &self.property {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.property)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.label);
        }
        for value in &self.property {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.label.is_empty() {
            os.write_string(1, &self.label)?;
        }
        for v in &self.property {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddTypePropertyReq {
        AddTypePropertyReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "label",
                |m: &AddTypePropertyReq| { &m.label },
                |m: &mut AddTypePropertyReq| { &mut m.label },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PropertyDefProto>>(
                "property",
                |m: &AddTypePropertyReq| { &m.property },
                |m: &mut AddTypePropertyReq| { &mut m.property },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AddTypePropertyReq>(
                "AddTypePropertyReq",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AddTypePropertyReq {
        static instance: ::protobuf::rt::LazyV2<AddTypePropertyReq> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AddTypePropertyReq::new)
    }
}

impl ::protobuf::Clear for AddTypePropertyReq {
    fn clear(&mut self) {
        self.label.clear();
        self.property.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddTypePropertyReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddTypePropertyReq {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateTypePropertyReq {
    // message fields
    pub label: ::std::string::String,
    pub property: ::protobuf::RepeatedField<PropertyDefProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateTypePropertyReq {
    fn default() -> &'a UpdateTypePropertyReq {
        <UpdateTypePropertyReq as ::protobuf::Message>::default_instance()
    }
}

impl UpdateTypePropertyReq {
    pub fn new() -> UpdateTypePropertyReq {
        ::std::default::Default::default()
    }

    // string label = 1;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    // repeated .PropertyDefProto property = 2;


    pub fn get_property(&self) -> &[PropertyDefProto] {
        &self.property
    }
    pub fn clear_property(&mut self) {
        self.property.clear();
    }

    // Param is passed by value, moved
    pub fn set_property(&mut self, v: ::protobuf::RepeatedField<PropertyDefProto>) {
        self.property = v;
    }

    // Mutable pointer to the field.
    pub fn mut_property(&mut self) -> &mut ::protobuf::RepeatedField<PropertyDefProto> {
        &mut self.property
    }

    // Take field
    pub fn take_property(&mut self) -> ::protobuf::RepeatedField<PropertyDefProto> {
        ::std::mem::replace(&mut self.property, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for UpdateTypePropertyReq {
    fn is_initialized(&self) -> bool {
        for v in &self.property {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.property)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.label);
        }
        for value in &self.property {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.label.is_empty() {
            os.write_string(1, &self.label)?;
        }
        for v in &self.property {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateTypePropertyReq {
        UpdateTypePropertyReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "label",
                |m: &UpdateTypePropertyReq| { &m.label },
                |m: &mut UpdateTypePropertyReq| { &mut m.label },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PropertyDefProto>>(
                "property",
                |m: &UpdateTypePropertyReq| { &m.property },
                |m: &mut UpdateTypePropertyReq| { &mut m.property },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateTypePropertyReq>(
                "UpdateTypePropertyReq",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateTypePropertyReq {
        static instance: ::protobuf::rt::LazyV2<UpdateTypePropertyReq> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateTypePropertyReq::new)
    }
}

impl ::protobuf::Clear for UpdateTypePropertyReq {
    fn clear(&mut self) {
        self.label.clear();
        self.property.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateTypePropertyReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateTypePropertyReq {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DropTypePropertyReq {
    // message fields
    pub label: ::std::string::String,
    pub propertyName: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DropTypePropertyReq {
    fn default() -> &'a DropTypePropertyReq {
        <DropTypePropertyReq as ::protobuf::Message>::default_instance()
    }
}

impl DropTypePropertyReq {
    pub fn new() -> DropTypePropertyReq {
        ::std::default::Default::default()
    }

    // string label = 1;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    // repeated string propertyName = 2;


    pub fn get_propertyName(&self) -> &[::std::string::String] {
        &self.propertyName
    }
    pub fn clear_propertyName(&mut self) {
        self.propertyName.clear();
    }

    // Param is passed by value, moved
    pub fn set_propertyName(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.propertyName = v;
    }

    // Mutable pointer to the field.
    pub fn mut_propertyName(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.propertyName
    }

    // Take field
    pub fn take_propertyName(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.propertyName, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for DropTypePropertyReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.propertyName)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.label);
        }
        for value in &self.propertyName {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.label.is_empty() {
            os.write_string(1, &self.label)?;
        }
        for v in &self.propertyName {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DropTypePropertyReq {
        DropTypePropertyReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "label",
                |m: &DropTypePropertyReq| { &m.label },
                |m: &mut DropTypePropertyReq| { &mut m.label },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "propertyName",
                |m: &DropTypePropertyReq| { &m.propertyName },
                |m: &mut DropTypePropertyReq| { &mut m.propertyName },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DropTypePropertyReq>(
                "DropTypePropertyReq",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DropTypePropertyReq {
        static instance: ::protobuf::rt::LazyV2<DropTypePropertyReq> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DropTypePropertyReq::new)
    }
}

impl ::protobuf::Clear for DropTypePropertyReq {
    fn clear(&mut self) {
        self.label.clear();
        self.propertyName.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DropTypePropertyReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DropTypePropertyReq {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RelationShipReq {
    // message fields
    pub edgeLabel: ::std::string::String,
    pub srcVertexLabel: ::std::string::String,
    pub dstVertexLabel: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RelationShipReq {
    fn default() -> &'a RelationShipReq {
        <RelationShipReq as ::protobuf::Message>::default_instance()
    }
}

impl RelationShipReq {
    pub fn new() -> RelationShipReq {
        ::std::default::Default::default()
    }

    // string edgeLabel = 1;


    pub fn get_edgeLabel(&self) -> &str {
        &self.edgeLabel
    }
    pub fn clear_edgeLabel(&mut self) {
        self.edgeLabel.clear();
    }

    // Param is passed by value, moved
    pub fn set_edgeLabel(&mut self, v: ::std::string::String) {
        self.edgeLabel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_edgeLabel(&mut self) -> &mut ::std::string::String {
        &mut self.edgeLabel
    }

    // Take field
    pub fn take_edgeLabel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.edgeLabel, ::std::string::String::new())
    }

    // string srcVertexLabel = 2;


    pub fn get_srcVertexLabel(&self) -> &str {
        &self.srcVertexLabel
    }
    pub fn clear_srcVertexLabel(&mut self) {
        self.srcVertexLabel.clear();
    }

    // Param is passed by value, moved
    pub fn set_srcVertexLabel(&mut self, v: ::std::string::String) {
        self.srcVertexLabel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_srcVertexLabel(&mut self) -> &mut ::std::string::String {
        &mut self.srcVertexLabel
    }

    // Take field
    pub fn take_srcVertexLabel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.srcVertexLabel, ::std::string::String::new())
    }

    // string dstVertexLabel = 3;


    pub fn get_dstVertexLabel(&self) -> &str {
        &self.dstVertexLabel
    }
    pub fn clear_dstVertexLabel(&mut self) {
        self.dstVertexLabel.clear();
    }

    // Param is passed by value, moved
    pub fn set_dstVertexLabel(&mut self, v: ::std::string::String) {
        self.dstVertexLabel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dstVertexLabel(&mut self) -> &mut ::std::string::String {
        &mut self.dstVertexLabel
    }

    // Take field
    pub fn take_dstVertexLabel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dstVertexLabel, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RelationShipReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.edgeLabel)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.srcVertexLabel)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dstVertexLabel)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.edgeLabel.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.edgeLabel);
        }
        if !self.srcVertexLabel.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.srcVertexLabel);
        }
        if !self.dstVertexLabel.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.dstVertexLabel);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.edgeLabel.is_empty() {
            os.write_string(1, &self.edgeLabel)?;
        }
        if !self.srcVertexLabel.is_empty() {
            os.write_string(2, &self.srcVertexLabel)?;
        }
        if !self.dstVertexLabel.is_empty() {
            os.write_string(3, &self.dstVertexLabel)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RelationShipReq {
        RelationShipReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "edgeLabel",
                |m: &RelationShipReq| { &m.edgeLabel },
                |m: &mut RelationShipReq| { &mut m.edgeLabel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "srcVertexLabel",
                |m: &RelationShipReq| { &m.srcVertexLabel },
                |m: &mut RelationShipReq| { &mut m.srcVertexLabel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "dstVertexLabel",
                |m: &RelationShipReq| { &m.dstVertexLabel },
                |m: &mut RelationShipReq| { &mut m.dstVertexLabel },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RelationShipReq>(
                "RelationShipReq",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RelationShipReq {
        static instance: ::protobuf::rt::LazyV2<RelationShipReq> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RelationShipReq::new)
    }
}

impl ::protobuf::Clear for RelationShipReq {
    fn clear(&mut self) {
        self.edgeLabel.clear();
        self.srcVertexLabel.clear();
        self.dstVertexLabel.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RelationShipReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RelationShipReq {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RelationShipResp {
    // message fields
    pub resp: ::protobuf::SingularPtrField<super::common::Response>,
    pub relationShips: ::protobuf::RepeatedField<RelationShipProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RelationShipResp {
    fn default() -> &'a RelationShipResp {
        <RelationShipResp as ::protobuf::Message>::default_instance()
    }
}

impl RelationShipResp {
    pub fn new() -> RelationShipResp {
        ::std::default::Default::default()
    }

    // .Response resp = 1;


    pub fn get_resp(&self) -> &super::common::Response {
        self.resp.as_ref().unwrap_or_else(|| <super::common::Response as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resp(&mut self) {
        self.resp.clear();
    }

    pub fn has_resp(&self) -> bool {
        self.resp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resp(&mut self, v: super::common::Response) {
        self.resp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resp(&mut self) -> &mut super::common::Response {
        if self.resp.is_none() {
            self.resp.set_default();
        }
        self.resp.as_mut().unwrap()
    }

    // Take field
    pub fn take_resp(&mut self) -> super::common::Response {
        self.resp.take().unwrap_or_else(|| super::common::Response::new())
    }

    // repeated .RelationShipProto relationShips = 2;


    pub fn get_relationShips(&self) -> &[RelationShipProto] {
        &self.relationShips
    }
    pub fn clear_relationShips(&mut self) {
        self.relationShips.clear();
    }

    // Param is passed by value, moved
    pub fn set_relationShips(&mut self, v: ::protobuf::RepeatedField<RelationShipProto>) {
        self.relationShips = v;
    }

    // Mutable pointer to the field.
    pub fn mut_relationShips(&mut self) -> &mut ::protobuf::RepeatedField<RelationShipProto> {
        &mut self.relationShips
    }

    // Take field
    pub fn take_relationShips(&mut self) -> ::protobuf::RepeatedField<RelationShipProto> {
        ::std::mem::replace(&mut self.relationShips, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RelationShipResp {
    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.relationShips {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resp)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.relationShips)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.relationShips {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resp.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.relationShips {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RelationShipResp {
        RelationShipResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Response>>(
                "resp",
                |m: &RelationShipResp| { &m.resp },
                |m: &mut RelationShipResp| { &mut m.resp },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RelationShipProto>>(
                "relationShips",
                |m: &RelationShipResp| { &m.relationShips },
                |m: &mut RelationShipResp| { &mut m.relationShips },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RelationShipResp>(
                "RelationShipResp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RelationShipResp {
        static instance: ::protobuf::rt::LazyV2<RelationShipResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RelationShipResp::new)
    }
}

impl ::protobuf::Clear for RelationShipResp {
    fn clear(&mut self) {
        self.resp.clear();
        self.relationShips.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RelationShipResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RelationShipResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddIndexReq {
    // message fields
    pub label: ::std::string::String,
    pub name: ::std::string::String,
    pub indexType: IndexDefProto_Type,
    pub property: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddIndexReq {
    fn default() -> &'a AddIndexReq {
        <AddIndexReq as ::protobuf::Message>::default_instance()
    }
}

impl AddIndexReq {
    pub fn new() -> AddIndexReq {
        ::std::default::Default::default()
    }

    // string label = 1;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .IndexDefProto.Type indexType = 3;


    pub fn get_indexType(&self) -> IndexDefProto_Type {
        self.indexType
    }
    pub fn clear_indexType(&mut self) {
        self.indexType = IndexDefProto_Type::PRIMARY_KEY;
    }

    // Param is passed by value, moved
    pub fn set_indexType(&mut self, v: IndexDefProto_Type) {
        self.indexType = v;
    }

    // repeated string property = 4;


    pub fn get_property(&self) -> &[::std::string::String] {
        &self.property
    }
    pub fn clear_property(&mut self) {
        self.property.clear();
    }

    // Param is passed by value, moved
    pub fn set_property(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.property = v;
    }

    // Mutable pointer to the field.
    pub fn mut_property(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.property
    }

    // Take field
    pub fn take_property(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.property, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AddIndexReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.indexType, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.property)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.label);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.indexType != IndexDefProto_Type::PRIMARY_KEY {
            my_size += ::protobuf::rt::enum_size(3, self.indexType);
        }
        for value in &self.property {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.label.is_empty() {
            os.write_string(1, &self.label)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.indexType != IndexDefProto_Type::PRIMARY_KEY {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.indexType))?;
        }
        for v in &self.property {
            os.write_string(4, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddIndexReq {
        AddIndexReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "label",
                |m: &AddIndexReq| { &m.label },
                |m: &mut AddIndexReq| { &mut m.label },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &AddIndexReq| { &m.name },
                |m: &mut AddIndexReq| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<IndexDefProto_Type>>(
                "indexType",
                |m: &AddIndexReq| { &m.indexType },
                |m: &mut AddIndexReq| { &mut m.indexType },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "property",
                |m: &AddIndexReq| { &m.property },
                |m: &mut AddIndexReq| { &mut m.property },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AddIndexReq>(
                "AddIndexReq",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AddIndexReq {
        static instance: ::protobuf::rt::LazyV2<AddIndexReq> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AddIndexReq::new)
    }
}

impl ::protobuf::Clear for AddIndexReq {
    fn clear(&mut self) {
        self.label.clear();
        self.name.clear();
        self.indexType = IndexDefProto_Type::PRIMARY_KEY;
        self.property.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddIndexReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddIndexReq {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DropIndexReq {
    // message fields
    pub label: ::std::string::String,
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DropIndexReq {
    fn default() -> &'a DropIndexReq {
        <DropIndexReq as ::protobuf::Message>::default_instance()
    }
}

impl DropIndexReq {
    pub fn new() -> DropIndexReq {
        ::std::default::Default::default()
    }

    // string label = 1;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DropIndexReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.label);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.label.is_empty() {
            os.write_string(1, &self.label)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DropIndexReq {
        DropIndexReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "label",
                |m: &DropIndexReq| { &m.label },
                |m: &mut DropIndexReq| { &mut m.label },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &DropIndexReq| { &m.name },
                |m: &mut DropIndexReq| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DropIndexReq>(
                "DropIndexReq",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DropIndexReq {
        static instance: ::protobuf::rt::LazyV2<DropIndexReq> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DropIndexReq::new)
    }
}

impl ::protobuf::Clear for DropIndexReq {
    fn clear(&mut self) {
        self.label.clear();
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DropIndexReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DropIndexReq {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SchemaReq {
    // message fields
    pub schemaVersion: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SchemaReq {
    fn default() -> &'a SchemaReq {
        <SchemaReq as ::protobuf::Message>::default_instance()
    }
}

impl SchemaReq {
    pub fn new() -> SchemaReq {
        ::std::default::Default::default()
    }

    // int32 schemaVersion = 1;


    pub fn get_schemaVersion(&self) -> i32 {
        self.schemaVersion
    }
    pub fn clear_schemaVersion(&mut self) {
        self.schemaVersion = 0;
    }

    // Param is passed by value, moved
    pub fn set_schemaVersion(&mut self, v: i32) {
        self.schemaVersion = v;
    }
}

impl ::protobuf::Message for SchemaReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.schemaVersion = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.schemaVersion != 0 {
            my_size += ::protobuf::rt::value_size(1, self.schemaVersion, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.schemaVersion != 0 {
            os.write_int32(1, self.schemaVersion)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SchemaReq {
        SchemaReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "schemaVersion",
                |m: &SchemaReq| { &m.schemaVersion },
                |m: &mut SchemaReq| { &mut m.schemaVersion },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SchemaReq>(
                "SchemaReq",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SchemaReq {
        static instance: ::protobuf::rt::LazyV2<SchemaReq> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SchemaReq::new)
    }
}

impl ::protobuf::Clear for SchemaReq {
    fn clear(&mut self) {
        self.schemaVersion = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SchemaReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SchemaReq {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VersionedSchemaResp {
    // message fields
    pub resp: ::protobuf::SingularPtrField<super::common::Response>,
    pub schema: ::protobuf::SingularPtrField<SchemaProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VersionedSchemaResp {
    fn default() -> &'a VersionedSchemaResp {
        <VersionedSchemaResp as ::protobuf::Message>::default_instance()
    }
}

impl VersionedSchemaResp {
    pub fn new() -> VersionedSchemaResp {
        ::std::default::Default::default()
    }

    // .Response resp = 1;


    pub fn get_resp(&self) -> &super::common::Response {
        self.resp.as_ref().unwrap_or_else(|| <super::common::Response as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resp(&mut self) {
        self.resp.clear();
    }

    pub fn has_resp(&self) -> bool {
        self.resp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resp(&mut self, v: super::common::Response) {
        self.resp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resp(&mut self) -> &mut super::common::Response {
        if self.resp.is_none() {
            self.resp.set_default();
        }
        self.resp.as_mut().unwrap()
    }

    // Take field
    pub fn take_resp(&mut self) -> super::common::Response {
        self.resp.take().unwrap_or_else(|| super::common::Response::new())
    }

    // .SchemaProto schema = 2;


    pub fn get_schema(&self) -> &SchemaProto {
        self.schema.as_ref().unwrap_or_else(|| <SchemaProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_schema(&mut self) {
        self.schema.clear();
    }

    pub fn has_schema(&self) -> bool {
        self.schema.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema(&mut self, v: SchemaProto) {
        self.schema = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema(&mut self) -> &mut SchemaProto {
        if self.schema.is_none() {
            self.schema.set_default();
        }
        self.schema.as_mut().unwrap()
    }

    // Take field
    pub fn take_schema(&mut self) -> SchemaProto {
        self.schema.take().unwrap_or_else(|| SchemaProto::new())
    }
}

impl ::protobuf::Message for VersionedSchemaResp {
    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.schema {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resp)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.schema)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.schema.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resp.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.schema.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VersionedSchemaResp {
        VersionedSchemaResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Response>>(
                "resp",
                |m: &VersionedSchemaResp| { &m.resp },
                |m: &mut VersionedSchemaResp| { &mut m.resp },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SchemaProto>>(
                "schema",
                |m: &VersionedSchemaResp| { &m.schema },
                |m: &mut VersionedSchemaResp| { &mut m.schema },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VersionedSchemaResp>(
                "VersionedSchemaResp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VersionedSchemaResp {
        static instance: ::protobuf::rt::LazyV2<VersionedSchemaResp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VersionedSchemaResp::new)
    }
}

impl ::protobuf::Clear for VersionedSchemaResp {
    fn clear(&mut self) {
        self.resp.clear();
        self.schema.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VersionedSchemaResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VersionedSchemaResp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum StorageEngine {
    MEMORY = 0,
    ROCKSDB = 1,
    ALIBTREE = 2,
}

impl ::protobuf::ProtobufEnum for StorageEngine {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<StorageEngine> {
        match value {
            0 => ::std::option::Option::Some(StorageEngine::MEMORY),
            1 => ::std::option::Option::Some(StorageEngine::ROCKSDB),
            2 => ::std::option::Option::Some(StorageEngine::ALIBTREE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [StorageEngine] = &[
            StorageEngine::MEMORY,
            StorageEngine::ROCKSDB,
            StorageEngine::ALIBTREE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<StorageEngine>("StorageEngine", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for StorageEngine {
}

impl ::std::default::Default for StorageEngine {
    fn default() -> Self {
        StorageEngine::MEMORY
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageEngine {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10sdk/schema.proto\x1a\x10sdk/common.proto\"b\n\x0bTypeIdProto\x12\
    \x0e\n\x02id\x18\x01\x20\x01(\rR\x02id\x12%\n\x04type\x18\x02\x20\x01(\
    \x0e2\x11.TypeIdProto.TypeR\x04type\"\x1c\n\x04Type\x12\n\n\x06VERTEX\
    \x10\0\x12\x08\n\x04EDGE\x10\x01\"\xe2\x01\n\x10PropertyDefProto\x12\x0e\
    \n\x02id\x18\x01\x20\x01(\x05R\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\
    \tR\x04name\x12\x1a\n\x08dataType\x18\x03\x20\x01(\x05R\x08dataType\x12&\
    \n\x0etypeExpression\x18\x04\x20\x01(\tR\x0etypeExpression\x12\x18\n\x07\
    comment\x18\x05\x20\x01(\tR\x07comment\x12(\n\x0fhasDefaultValue\x18\x06\
    \x20\x01(\x08R\x0fhasDefaultValue\x12\"\n\x0cdefaultValue\x18\x07\x20\
    \x01(\x0cR\x0cdefaultValue\"\xa2\x04\n\x0cTypeDefProto\x12\x0e\n\x02id\
    \x18\x01\x20\x01(\x05R\x02id\x12\x14\n\x05label\x18\x02\x20\x01(\tR\x05l\
    abel\x12%\n\x04type\x18\x03\x20\x01(\x0e2\x11.TypeIdProto.TypeR\x04type\
    \x12(\n\x0fisDimensionType\x18\x04\x20\x01(\x08R\x0fisDimensionType\x12-\
    \n\x08property\x18\x05\x20\x03(\x0b2\x11.PropertyDefProtoR\x08property\
    \x12$\n\x05index\x18\x06\x20\x03(\x0b2\x0e.IndexDefProtoR\x05index\x12\
    \x18\n\x07comment\x18\x07\x20\x01(\tR\x07comment\x12\x18\n\x07version\
    \x18\x08\x20\x01(\x05R\x07version\x12:\n\x0frawRelationShip\x18\t\x20\
    \x03(\x0b2\x10.RelationShipReqR\x0frawRelationShip\x126\n\x0crelationShi\
    p\x18\n\x20\x03(\x0b2\x12.RelationShipProtoR\x0crelationShip\x12(\n\x06o\
    ption\x18\x0b\x20\x01(\x0b2\x10.TypeOptionProtoR\x06option\x127\n\x08gid\
    ToPid\x18\x0c\x20\x03(\x0b2\x1b.TypeDefProto.GidToPidEntryR\x08gidToPid\
    \x1a;\n\rGidToPidEntry\x12\x10\n\x03key\x18\x01\x20\x01(\x05R\x03key\x12\
    \x14\n\x05value\x18\x02\x20\x01(\x05R\x05value:\x028\x01\"G\n\x0fTypeOpt\
    ionProto\x124\n\rstorageEngine\x18\x01\x20\x01(\x0e2\x0e.StorageEngineR\
    \rstorageEngine\"\x81\x01\n\x11RelationShipProto\x12\"\n\x05srcId\x18\
    \x01\x20\x01(\x0b2\x0c.TypeIdProtoR\x05srcId\x12\"\n\x05dstId\x18\x02\
    \x20\x01(\x0b2\x0c.TypeIdProtoR\x05dstId\x12$\n\x06edgeId\x18\x03\x20\
    \x01(\x0b2\x0c.TypeIdProtoR\x06edgeId\"\xa0\x01\n\x19RelationShipWithTyp\
    eProto\x12+\n\tsrcVertex\x18\x01\x20\x01(\x0b2\r.TypeDefProtoR\tsrcVerte\
    x\x12)\n\x08edgeType\x18\x02\x20\x01(\x0b2\r.TypeDefProtoR\x08edgeType\
    \x12+\n\tdstVertex\x18\x03\x20\x01(\x0b2\r.TypeDefProtoR\tdstVertex\"\
    \xcd\x01\n\rIndexDefProto\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\
    \x12\x1e\n\npropertyId\x18\x02\x20\x03(\x05R\npropertyId\x121\n\tindexTy\
    pe\x18\x03\x20\x01(\x0e2\x13.IndexDefProto.TypeR\tindexType\x12\x1a\n\
    \x08property\x18\x04\x20\x03(\tR\x08property\"9\n\x04Type\x12\x0f\n\x0bP\
    RIMARY_KEY\x10\0\x12\n\n\x06UNIQUE\x10\x01\x12\x14\n\x10UNIQUE_WITH_EDGE\
    \x10\x02\"n\n\x0bSchemaProto\x12!\n\x04type\x18\x01\x20\x03(\x0b2\r.Type\
    DefProtoR\x04type\x12\"\n\x0cpartitionNum\x18\x02\x20\x01(\x05R\x0cparti\
    tionNum\x12\x18\n\x07version\x18\x03\x20\x01(\x05R\x07version\"\x80\x02\
    \n\x13CreateVertexTypeReq\x12\x14\n\x05label\x18\x01\x20\x01(\tR\x05labe\
    l\x12-\n\x08property\x18\x02\x20\x03(\x0b2\x11.PropertyDefProtoR\x08prop\
    erty\x12\x10\n\x03pks\x18\x03\x20\x03(\tR\x03pks\x12\x18\n\x07comment\
    \x18\x04\x20\x01(\tR\x07comment\x12(\n\x0fisDimensionType\x18\x05\x20\
    \x01(\x08R\x0fisDimensionType\x12(\n\x06option\x18\x06\x20\x01(\x0b2\x10\
    .TypeOptionProtoR\x06option\x12$\n\x05index\x18\x07\x20\x03(\x0b2\x0e.In\
    dexDefProtoR\x05index\"\xa2\x02\n\x11CreateEdgeTypeReq\x12\x14\n\x05labe\
    l\x18\x01\x20\x01(\tR\x05label\x12-\n\x08property\x18\x02\x20\x03(\x0b2\
    \x11.PropertyDefProtoR\x08property\x12\x18\n\x07comment\x18\x03\x20\x01(\
    \tR\x07comment\x124\n\x0crelationShip\x18\x04\x20\x03(\x0b2\x10.Relation\
    ShipReqR\x0crelationShip\x12(\n\x0fisDimensionType\x18\x05\x20\x01(\x08R\
    \x0fisDimensionType\x12(\n\x06option\x18\x06\x20\x01(\x0b2\x10.TypeOptio\
    nProtoR\x06option\x12$\n\x05index\x18\x07\x20\x03(\x0b2\x0e.IndexDefProt\
    oR\x05index\"\x8d\x01\n\x07TypeReq\x12$\n\rschemaVersion\x18\x01\x20\x01\
    (\x05R\rschemaVersion\x12\x20\n\x0btypeVersion\x18\x02\x20\x01(\x05R\x0b\
    typeVersion\x12\x14\n\x05label\x18\x03\x20\x01(\tR\x05label\x12$\n\x06ty\
    peId\x18\x04\x20\x01(\x0b2\x0c.TypeIdProtoR\x06typeId\"Y\n\x12AddTypePro\
    pertyReq\x12\x14\n\x05label\x18\x01\x20\x01(\tR\x05label\x12-\n\x08prope\
    rty\x18\x02\x20\x03(\x0b2\x11.PropertyDefProtoR\x08property\"\\\n\x15Upd\
    ateTypePropertyReq\x12\x14\n\x05label\x18\x01\x20\x01(\tR\x05label\x12-\
    \n\x08property\x18\x02\x20\x03(\x0b2\x11.PropertyDefProtoR\x08property\"\
    O\n\x13DropTypePropertyReq\x12\x14\n\x05label\x18\x01\x20\x01(\tR\x05lab\
    el\x12\"\n\x0cpropertyName\x18\x02\x20\x03(\tR\x0cpropertyName\"\x7f\n\
    \x0fRelationShipReq\x12\x1c\n\tedgeLabel\x18\x01\x20\x01(\tR\tedgeLabel\
    \x12&\n\x0esrcVertexLabel\x18\x02\x20\x01(\tR\x0esrcVertexLabel\x12&\n\
    \x0edstVertexLabel\x18\x03\x20\x01(\tR\x0edstVertexLabel\"k\n\x10Relatio\
    nShipResp\x12\x1d\n\x04resp\x18\x01\x20\x01(\x0b2\t.ResponseR\x04resp\
    \x128\n\rrelationShips\x18\x02\x20\x03(\x0b2\x12.RelationShipProtoR\rrel\
    ationShips\"\x86\x01\n\x0bAddIndexReq\x12\x14\n\x05label\x18\x01\x20\x01\
    (\tR\x05label\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x121\n\tinde\
    xType\x18\x03\x20\x01(\x0e2\x13.IndexDefProto.TypeR\tindexType\x12\x1a\n\
    \x08property\x18\x04\x20\x03(\tR\x08property\"8\n\x0cDropIndexReq\x12\
    \x14\n\x05label\x18\x01\x20\x01(\tR\x05label\x12\x12\n\x04name\x18\x02\
    \x20\x01(\tR\x04name\"1\n\tSchemaReq\x12$\n\rschemaVersion\x18\x01\x20\
    \x01(\x05R\rschemaVersion\"Z\n\x13VersionedSchemaResp\x12\x1d\n\x04resp\
    \x18\x01\x20\x01(\x0b2\t.ResponseR\x04resp\x12$\n\x06schema\x18\x02\x20\
    \x01(\x0b2\x0c.SchemaProtoR\x06schema*6\n\rStorageEngine\x12\n\n\x06MEMO\
    RY\x10\0\x12\x0b\n\x07ROCKSDB\x10\x01\x12\x0c\n\x08ALIBTREE\x10\x02B\x1e\
    \n\x1acom.alibaba.maxgraph.protoP\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
